// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider     = "mysql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String       @id @default(cuid())
  name          String
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  //local accounts
  username      String       @unique
  password      String
  //
  accounts      Account[]
  sessions      Session[]
  memberships   Membership[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Waitlist {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
}

// Multi-Tenant
model Organization {
  id                 String               @id @default(cuid())
  name               String               @unique
  description        String?
  image              String?
  status             OrganizationStatus   @default(ACTIVE)
  plan               OrganizationPlan     @default(TRIAL)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  subdomain          String               @unique
  memberships        Membership[]
  locations          Location[]
  companies          Company[]
  operators          Operator[]
  vehicles           Vehicle[]
  containers         Container[]
  inspections        Inspection[]
  inspectionItem     InspectionItem[]
  inspectionItemFile InspectionItemFile[]
  shareItems         ShareItem[]
}

model Membership {
  id             String         @id @default(cuid())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  role           MembershipRole
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  isActive       Boolean        @default(true)
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  inspections    Inspection[]   @relation(name: "inspectedBy")
  approvals      Inspection[]   @relation(name: "approvedBy")

  @@unique([organizationId, userId])
  @@index([userId])
}

model Location {
  id             String       @id @default(cuid())
  name           String       @unique
  description    String?
  isActive       Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  inspections    Inspection[]

  @@index([organizationId])
}

model Company {
  id             String       @id @default(cuid())
  name           String       @unique
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  inspections    Inspection[]

  @@index([organizationId])
}

model Operator {
  id             String       @id @default(cuid())
  name           String       @unique
  licenseNumber  String       @unique
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  inspections    Inspection[]

  @@index([organizationId])
}

model Vehicle {
  id             String       @id @default(cuid())
  vehicleNbr     String       @unique
  licensePlate   String       @unique
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  inspections    Inspection[]

  @@index([organizationId])
}

model Container {
  id             String       @id @default(cuid())
  containerNbr   String       @unique
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  inspections    Inspection[]

  @@index([organizationId])
}

model Inspection {
  id              String             @id @default(cuid())
  inspectionNbr   Int                @unique @default(autoincrement())
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  operator        Operator           @relation(fields: [operatorId], references: [id])
  operatorId      String
  licenseNumber   String?
  vehicle         Vehicle            @relation(fields: [vehicleId], references: [id])
  vehicleId       String
  licensePlate    String?
  container       Container          @relation(fields: [containerId], references: [id])
  containerId     String
  company         Company            @relation(fields: [companyId], references: [id])
  companyId       String
  isLoaded        Boolean
  sealNbr         String?
  tiresVehicle    String?
  tiresContainer  String?
  inspectedBy     Membership         @relation(name: "inspectedBy", fields: [inspectedById], references: [id])
  inspectedById   String
  approvedBy      Membership?        @relation(name: "approvedBy", fields: [approvedById], references: [id])
  approvedById    String?
  tripType        InspectionTripType
  start           DateTime
  end             DateTime?
  inspectionType  InspectionType
  status          InspectionStatus
  result          InspectionResult?
  notes           String?
  organization    Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId  String
  inspectionItems InspectionItem[]
  location        Location?          @relation(fields: [locationId], references: [id])
  locationId      String?

  @@index([inspectionNbr])
  @@index([operatorId])
  @@index([vehicleId])
  @@index([containerId])
  @@index([companyId])
  @@index([organizationId])
  @@index([inspectedById])
  @@index([approvedById])
  @@index([locationId])
  @@index([start])
  @@index([result])
}

model InspectionItem {
  id                  String               @id @default(cuid())
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  inspection          Inspection           @relation(fields: [inspectionId], references: [id], onDelete: Cascade)
  inspectionId        String
  question            String
  result              InspectionItemResult
  notes               String?
  order               Int
  organization        Organization         @relation(fields: [organizationId], references: [id])
  organizationId      String
  inspectionItemFiles InspectionItemFile[]

  @@index([inspectionId])
  @@index([organizationId])
}

model InspectionItemFile {
  id               String         @id @default(cuid())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  inspectionItem   InspectionItem @relation(fields: [inspectionItemId], references: [id], onDelete: Cascade)
  inspectionItemId String
  fileUrl          String         @db.Text
  organization     Organization   @relation(fields: [organizationId], references: [id])
  organizationId   String

  @@index([inspectionItemId])
  @@index([organizationId])
}

model ShareItem {
  id             String       @id @default(cuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  shareUrl       String       @unique
  expires        DateTime?
  password       String?
  nanoid         String       @unique
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  @@index([organizationId])
  @@index([nanoid])
}

enum OrganizationStatus {
  ACTIVE
  DUE
  INACTIVE
}

enum OrganizationPlan {
  TRIAL
  BASIC
  PRO
  ENTERPRISE
}

enum MembershipRole {
  OWNER
  ADMIN
  MEMBER
  SUPERVISOR
}

enum InspectionTripType {
  IN
  OUT
}

enum InspectionType {
  CTPAT
  TRANSFER
}

enum InspectionStatus {
  OPEN
  CLOSED
  APPROVED
}

enum InspectionResult {
  PASS
  FAIL
}

enum InspectionItemResult {
  PASS
  FAIL
  NA
}
